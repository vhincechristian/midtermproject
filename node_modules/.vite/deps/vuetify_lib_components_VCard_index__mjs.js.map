{
  "version": 3,
  "sources": ["../../vuetify/src/components/VCard/VCard.tsx", "../../vuetify/src/components/VCard/VCardActions.tsx", "../../vuetify/src/components/VCard/VCardSubtitle.ts", "../../vuetify/src/components/VCard/VCardTitle.ts", "../../vuetify/src/components/VCard/VCardItem.tsx", "../../vuetify/src/components/VCard/VCardText.ts"],
  "sourcesContent": ["/* eslint-disable complexity */\n\n// Styles\nimport './VCard.sass'\n\n// Components\nimport { VCardActions } from './VCardActions'\nimport { VCardItem } from './VCardItem'\nimport { VCardText } from './VCardText'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VImg } from '@/components/VImg'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { IconValue } from '@/composables/icons'\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { computed } from 'vue'\n\nexport const VCard = defineComponent({\n  name: 'VCard',\n\n  directives: { Ripple },\n\n  props: {\n    appendAvatar: String,\n    appendIcon: IconValue,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    image: String,\n    link: {\n      type: Boolean,\n      default: undefined,\n    },\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: Boolean,\n    subtitle: String,\n    text: String,\n    title: String,\n\n    ...makeThemeProps(),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLoaderProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeTagProps(),\n    ...makeVariantProps({ variant: 'elevated' } as const),\n  },\n\n  setup (props, { attrs, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { loaderClasses } = useLoader(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n    const link = useLink(props, attrs)\n\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (props.link || link.isClickable.value)\n    )\n\n    useRender(() => {\n      const Tag = isLink.value ? 'a' : props.tag\n      const hasTitle = !!(slots.title || props.title)\n      const hasSubtitle = !!(slots.subtitle || props.subtitle)\n      const hasHeader = hasTitle || hasSubtitle\n      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon)\n      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon)\n      const hasImage = !!(slots.image || props.image)\n      const hasCardItem = hasHeader || hasPrepend || hasAppend\n      const hasText = !!(slots.text || props.text)\n\n      return (\n        <Tag\n          class={[\n            'v-card',\n            {\n              'v-card--disabled': props.disabled,\n              'v-card--flat': props.flat,\n              'v-card--hover': props.hover && !(props.disabled || props.flat),\n              'v-card--link': isClickable.value,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            colorClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            loaderClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n          ]}\n          style={[\n            colorStyles.value,\n            dimensionStyles.value,\n            locationStyles.value,\n          ]}\n          href={ link.href.value }\n          onClick={ isClickable.value && link.navigate }\n          v-ripple={ isClickable.value }\n        >\n          { hasImage && (\n            <VDefaultsProvider\n              key=\"image\"\n              defaults={{\n                VImg: {\n                  cover: true,\n                  src: props.image,\n                },\n              }}\n            >\n              <div class=\"v-card__image\">\n                { slots.image?.() ?? <VImg /> }\n              </div>\n            </VDefaultsProvider>\n          ) }\n\n          <LoaderSlot\n            name=\"v-card\"\n            active={ !!props.loading }\n            color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n            v-slots={{ default: slots.loader }}\n          />\n\n          { hasCardItem && (\n            <VCardItem\n              key=\"item\"\n              prependAvatar={ props.prependAvatar }\n              prependIcon={ props.prependIcon }\n              title={ props.title }\n              subtitle={ props.subtitle }\n              appendAvatar={ props.appendAvatar }\n              appendIcon={ props.appendIcon }\n            >\n              {{\n                default: slots.item,\n                prepend: slots.prepend,\n                title: slots.title,\n                subtitle: slots.subtitle,\n                append: slots.append,\n              }}\n            </VCardItem>\n          ) }\n\n          { hasText && (\n            <VCardText key=\"text\">\n              { slots.text?.() ?? props.text }\n            </VCardText>\n          ) }\n\n          { slots.default?.() }\n\n          { slots.actions && (\n            <VCardActions v-slots={{ default: slots.actions }} />\n          ) }\n\n          { genOverlays(isClickable.value, 'v-card') }\n        </Tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCard = InstanceType<typeof VCard>\n", "// Composables\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utility\nimport { defineComponent, useRender } from '@/util'\n\nexport const VCardActions = defineComponent({\n  name: 'VCardActions',\n\n  setup (_, { slots }) {\n    provideDefaults({\n      VBtn: {\n        variant: 'text',\n      },\n    })\n\n    useRender(() => (\n      <div class=\"v-card-actions\">\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardSubtitle = createSimpleFunctional('v-card-subtitle')\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardTitle = createSimpleFunctional('v-card-title')\n", "// Components\nimport { VAvatar } from '../VAvatar'\nimport { VCardSubtitle } from './VCardSubtitle'\nimport { VCardTitle } from './VCardTitle'\nimport { VDefaultsProvider } from '../VDefaultsProvider'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps } from '@/composables/density'\n\n// Utility\nimport { defineComponent } from 'vue'\nimport { useRender } from '@/util'\n\nexport const VCardItem = defineComponent({\n  name: 'VCardItem',\n\n  props: {\n    appendAvatar: String,\n    appendIcon: IconValue,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    subtitle: String,\n    title: String,\n\n    ...makeDensityProps(),\n  },\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const hasPrepend = !!(props.prependAvatar || props.prependIcon || slots.prepend)\n      const hasAppend = !!(props.appendAvatar || props.appendIcon || slots.append)\n      const hasTitle = !!(props.title || slots.title)\n      const hasSubtitle = !!(props.subtitle || slots.subtitle)\n\n      return (\n        <div class=\"v-card-item\">\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  density: props.density,\n                  icon: props.prependIcon,\n                  image: props.prependAvatar,\n                },\n                VIcon: {\n                  density: props.density,\n                  icon: props.prependIcon,\n                },\n              }}\n            >\n              <div class=\"v-card-item__prepend\">\n                { slots.prepend?.() ?? (<VAvatar />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n\n          <div class=\"v-card-item__content\">\n            { hasTitle && (\n              <VCardTitle key=\"title\">\n                { slots.title?.() ?? props.title}\n              </VCardTitle>\n            ) }\n\n            { hasSubtitle && (\n              <VCardSubtitle key=\"subtitle\">\n                { slots.subtitle?.() ?? props.subtitle }\n              </VCardSubtitle>\n            ) }\n\n            { slots.default?.() }\n          </div>\n\n          { hasAppend && (\n            <VDefaultsProvider\n              key=\"append\"\n              defaults={{\n                VAvatar: {\n                  density: props.density,\n                  icon: props.appendIcon,\n                  image: props.appendAvatar,\n                },\n                VIcon: {\n                  density: props.density,\n                  icon: props.appendIcon,\n                },\n              }}\n            >\n              <div class=\"v-card-item__append\">\n                { slots.append?.() ?? (<VAvatar />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VCardText = createSimpleFunctional('v-card-text')\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAA;;;ACGO,IAAMA,eAAeC,iBAAgB;EAC1CC,MAAM;EAENC,MAAOC,GAAF,MAAgB;AAAA,QAAX;MAAEC;IAAF,IAAW;AACnBC,oBAAgB;MACdC,MAAM;QACJC,SAAS;MADL;IADQ,CAAD;AAMfC,cAAU,MAAA;AAAA,UAAA;AAAA,aAAA,YAAA,OAAA;QAAA,SACG;MADH,GAAA,EAAA,iBAEJJ,MAAMK,YAFF,OAAA,SAEJ,eAAA,KAAAL,KAAK,CAFD,CAAA;IAAA,CAAD;AAMT,WAAO,CAAA;EACR;AAjByC,CAAD;;;ACJpC,IAAMM,gBAAgBC,uBAAuB,iBAAD;;;ACA5C,IAAMC,aAAaC,uBAAuB,cAAD;;;ACYzC,IAAMC,YAAYC,gBAAgB;EACvCC,MAAM;EAENC,OAAO;IACLC,cAAcC;IACdC,YAAYC;IACZC,eAAeH;IACfI,aAAaF;IACbG,UAAUL;IACVM,OAAON;IAEP,GAAGO,iBAAgB;EARd;EAWPC,MAAOV,OAAF,MAAoB;AAAA,QAAX;MAAEW;IAAF,IAAW;AACvBC,cAAU,MAAM;AAAA,UAAA,gBAAA,iBAAA,cAAA,eAAA,iBAAA,kBAAA,gBAAA,eAAA;AACd,YAAMC,aAAa,CAAC,EAAEb,MAAMK,iBAAiBL,MAAMM,eAAeK,MAAMG;AACxE,YAAMC,YAAY,CAAC,EAAEf,MAAMC,gBAAgBD,MAAMG,cAAcQ,MAAMK;AACrE,YAAMC,WAAW,CAAC,EAAEjB,MAAMQ,SAASG,MAAMH;AACzC,YAAMU,cAAc,CAAC,EAAElB,MAAMO,YAAYI,MAAMJ;AAE/C,aAAA,YAAA,OAAA;QAAA,SACa;MADb,GAAA,CAEMM,cAAU,YAAA,mBAAA;QAAA,OAEJ;QAFI,YAGE;UACRM,SAAS;YACPC,SAASpB,MAAMoB;YACfC,MAAMrB,MAAMM;YACZgB,OAAOtB,MAAMK;UAHN;UAKTkB,OAAO;YACLH,SAASpB,MAAMoB;YACfC,MAAMrB,MAAMM;UAFP;QANC;MAHF,GAAA;QAAA,SAAA,MAAA,CAAA,YAAA,OAAA;UAAA,SAeG;QAfH,GAAA,EAAA,kBAAA,kBAgBJK,MAAMG,YAhBF,OAAA,SAgBJ,gBAAA,KAAAH,KAAK,MAhBD,OAAA,iBAAA,YAAA,SAAA,MAAA,IAAA,CAAA,CAAA,CAAA;MAAA,CAAA,GAFhB,YAAA,OAAA;QAAA,SAuBe;MAvBf,GAAA,CAwBQM,YAAQ,YAAA,YAAA;QAAA,OACQ;MADR,GAAA;QAAA,SAAA,MAAA,EAAA,gBAAA,gBAEJN,MAAMH,UAFF,OAAA,SAEJ,cAAA,KAAAG,KAAK,MAFD,OAAA,eAEeX,MAAMQ,KAFrB;MAAA,CAAA,GAMRU,eAAW,YAAA,eAAA;QAAA,OACQ;MADR,GAAA;QAAA,SAAA,MAAA,EAAA,mBAAA,mBAEPP,MAAMJ,aAFC,OAAA,SAEP,iBAAA,KAAAI,KAAK,MAFE,OAAA,kBAEeX,MAAMO,QAFrB;MAAA,CAAA,IA9BnB,iBAoCQI,MAAMa,YApCd,OAAA,SAoCQ,eAAA,KAAAb,KAAK,CApCb,CAAA,GAuCMI,aAAS,YAAA,mBAAA;QAAA,OAEH;QAFG,YAGG;UACRI,SAAS;YACPC,SAASpB,MAAMoB;YACfC,MAAMrB,MAAMG;YACZmB,OAAOtB,MAAMC;UAHN;UAKTsB,OAAO;YACLH,SAASpB,MAAMoB;YACfC,MAAMrB,MAAMG;UAFP;QANC;MAHH,GAAA;QAAA,SAAA,MAAA,CAAA,YAAA,OAAA;UAAA,SAeI;QAfJ,GAAA,EAAA,iBAAA,iBAgBHQ,MAAMK,WAhBH,OAAA,SAgBH,eAAA,KAAAL,KAAK,MAhBF,OAAA,gBAAA,YAAA,SAAA,MAAA,IAAA,CAAA,CAAA,CAAA;MAAA,CAAA,CAvCf,CAAA;IA6DD,CAnEQ;AAqET,WAAO,CAAA;EACR;AArFsC,CAAD;;;ACZjC,IAAMc,YAAYC,uBAAuB,aAAD;;;ALgCxC,IAAMC,QAAQC,iBAAgB;EACnCC,MAAM;EAENC,YAAY;IAAEC;EAAF;EAEZC,OAAO;IACLC,cAAcC;IACdC,YAAYC;IACZC,UAAUC;IACVC,MAAMD;IACNE,OAAOF;IACPG,OAAOP;IACPQ,MAAM;MACJC,MAAML;MACNM,SAASC;IAFL;IAINC,eAAeZ;IACfa,aAAaX;IACbY,QAAQV;IACRW,UAAUf;IACVgB,MAAMhB;IACNiB,OAAOjB;IAEP,GAAGkB,eAAc;IACjB,GAAGC,gBAAe;IAClB,GAAGC,iBAAgB;IACnB,GAAGC,mBAAkB;IACrB,GAAGC,mBAAkB;IACrB,GAAGC,gBAAe;IAClB,GAAGC,kBAAiB;IACpB,GAAGC,kBAAiB;IACpB,GAAGC,iBAAgB;IACnB,GAAGC,gBAAe;IAClB,GAAGC,aAAY;IACf,GAAGC,iBAAiB;MAAEC,SAAS;IAAX,CAAD;EA7Bd;EAgCPC,MAAOjC,OAAF,MAA2B;AAAA,QAAlB;MAAEkC;MAAOC;IAAT,IAAkB;AAC9B,UAAM;MAAEC;IAAF,IAAmBC,aAAarC,KAAD;AACrC,UAAM;MAAEsC;IAAF,IAAoBC,UAAUvC,KAAD;AACnC,UAAM;MAAEwC;MAAcC;MAAaC;IAA7B,IAAgDC,WAAW3C,KAAD;AAChE,UAAM;MAAE4C;IAAF,IAAqBC,WAAW7C,KAAD;AACrC,UAAM;MAAE8C;IAAF,IAAsBC,aAAa/C,KAAD;AACxC,UAAM;MAAEgD;IAAF,IAAuBC,aAAajD,KAAD;AACzC,UAAM;MAAEkD;IAAF,IAAoBC,UAAUnD,KAAD;AACnC,UAAM;MAAEoD;IAAF,IAAqBC,YAAYrD,KAAD;AACtC,UAAM;MAAEsD;IAAF,IAAsBC,YAAYvD,KAAD;AACvC,UAAM;MAAEwD;IAAF,IAAqBC,WAAWzD,KAAD;AACrC,UAAMU,OAAOgD,QAAQ1D,OAAOkC,KAAR;AAEpB,UAAMyB,SAASC,SAAS,MAAM5D,MAAMU,SAAS,SAASA,KAAKiD,OAAOE,KAA3C;AACvB,UAAMC,cAAcF,SAAS,MAC3B,CAAC5D,MAAMK,YACPL,MAAMU,SAAS,UACdV,MAAMU,QAAQA,KAAKoD,YAAYD,MAHN;AAM5BE,cAAU,MAAM;AAAA,UAAA,cAAA,eAAA,aAAA,cAAA;AACd,YAAMC,MAAML,OAAOE,QAAQ,MAAM7D,MAAMiE;AACvC,YAAMC,WAAW,CAAC,EAAE/B,MAAMhB,SAASnB,MAAMmB;AACzC,YAAMgD,cAAc,CAAC,EAAEhC,MAAMlB,YAAYjB,MAAMiB;AAC/C,YAAMmD,YAAYF,YAAYC;AAC9B,YAAME,YAAY,CAAC,EAAElC,MAAMmC,UAAUtE,MAAMC,gBAAgBD,MAAMG;AACjE,YAAMoE,aAAa,CAAC,EAAEpC,MAAMqC,WAAWxE,MAAMc,iBAAiBd,MAAMe;AACpE,YAAM0D,WAAW,CAAC,EAAEtC,MAAM1B,SAAST,MAAMS;AACzC,YAAMiE,cAAcN,aAAaG,cAAcF;AAC/C,YAAMM,UAAU,CAAC,EAAExC,MAAMjB,QAAQlB,MAAMkB;AAEvC,aAAA,eAAA,YAAA,KAAA;QAAA,SAEW,CACL,UACA;UACE,oBAAoBlB,MAAMK;UAC1B,gBAAgBL,MAAMO;UACtB,iBAAiBP,MAAMQ,SAAS,EAAER,MAAMK,YAAYL,MAAMO;UAC1D,gBAAgBuD,YAAYD;QAJ9B,GAMAzB,aAAayB,OACbvB,cAAcuB,OACdrB,aAAaqB,OACbjB,eAAeiB,OACfb,iBAAiBa,OACjBX,cAAcW,OACdP,gBAAgBO,OAChBL,eAAeK,OACfnB,eAAemB,KAhBV;QAFX,SAoBW,CACLpB,YAAYoB,OACZf,gBAAgBe,OAChBT,eAAeS,KAHV;QApBX,QAyBWnD,KAAKkE,KAAKf;QAzBrB,WA0BcC,YAAYD,SAASnD,KAAKmE;MA1BxC,GAAA;QAAA,SAAA,MAAA,CA6BMJ,YAAQ,YAAA,mBAAA;UAAA,OAEF;UAFE,YAGI;YACRK,MAAM;cACJC,OAAO;cACPC,KAAKhF,MAAMS;YAFP;UADE;QAHJ,GAAA;UAAA,SAAA,MAAA,CAAA,YAAA,OAAA;YAAA,SAUK;UAVL,GAAA,EAAA,gBAAA,gBAWF0B,MAAM1B,UAXJ,OAAA,SAWF,cAAA,KAAA0B,KAAK,MAXH,OAAA,eAAA,YAAA,MAAA,MAAA,IAAA,CAAA,CAAA,CAAA;QAAA,CAAA,GA7Bd,YAAA,YAAA;UAAA,QA8CW;UA9CX,UA+Ce,CAAC,CAACnC,MAAMiF;UA/CvB,SAgDc,OAAOjF,MAAMiF,YAAY,YAAYpE,SAAYb,MAAMiF;QAhDrE,GAiDe;UAAErE,SAASuB,MAAM+C;QAAjB,CAjDf,GAoDMR,eAAW,YAAA,WAAA;UAAA,OAEL;UAFK,iBAGO1E,MAAMc;UAHb,eAIKd,MAAMe;UAJX,SAKDf,MAAMmB;UALL,YAMEnB,MAAMiB;UANR,gBAOMjB,MAAMC;UAPZ,cAQID,MAAMG;QARV,GAAA;UAWPS,SAASuB,MAAMgD;UACfX,SAASrC,MAAMqC;UACfrD,OAAOgB,MAAMhB;UACbF,UAAUkB,MAAMlB;UAChBqD,QAAQnC,MAAMmC;QAfP,CAAA,GAoBXK,WAAO,YAAA,WAAA;UAAA,OACQ;QADR,GAAA;UAAA,SAAA,MAAA,EAAA,eAAA,eAEHxC,MAAMjB,SAFH,OAAA,SAEH,aAAA,KAAAiB,KAAK,MAFF,OAAA,cAEenC,MAAMkB,IAFrB;QAAA,CAAA,IAxEb,iBA8EMiB,MAAMvB,YA9EZ,OAAA,SA8EM,eAAA,KAAAuB,KAAK,GAELA,MAAMiD,WAAN,YAAA,cAAA,MACuB;UAAExE,SAASuB,MAAMiD;QAAjB,CADvB,GAIAC,YAAYvB,YAAYD,OAAO,QAApB,CApFjB;MAAA,CAAA,GAAA,CAAA,CAAA,iBAAA,QAAA,GA2BeC,YAAYD,KA3B3B,CAAA,CAAA;IAuFD,CAlGQ;AAoGT,WAAO,CAAA;EACR;AA9JkC,CAAD;",
  "names": ["VCardActions", "defineComponent", "name", "setup", "_", "slots", "provideDefaults", "VBtn", "variant", "useRender", "default", "VCardSubtitle", "createSimpleFunctional", "VCardTitle", "createSimpleFunctional", "VCardItem", "defineComponent", "name", "props", "appendAvatar", "String", "appendIcon", "IconValue", "prependAvatar", "prependIcon", "subtitle", "title", "makeDensityProps", "setup", "slots", "useRender", "hasPrepend", "prepend", "hasAppend", "append", "hasTitle", "hasSubtitle", "VAvatar", "density", "icon", "image", "VIcon", "default", "VCardText", "createSimpleFunctional", "VCard", "defineComponent", "name", "directives", "Ripple", "props", "appendAvatar", "String", "appendIcon", "IconValue", "disabled", "Boolean", "flat", "hover", "image", "link", "type", "default", "undefined", "prependAvatar", "prependIcon", "ripple", "subtitle", "text", "title", "makeThemeProps", "makeBorderProps", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLoaderProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeRouterProps", "makeTagProps", "makeVariantProps", "variant", "setup", "attrs", "slots", "themeClasses", "provideTheme", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "loaderClasses", "useLoader", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "useLink", "isLink", "computed", "value", "isClickable", "useRender", "Tag", "tag", "hasTitle", "hasSubtitle", "hasHeader", "hasAppend", "append", "hasPrepend", "prepend", "hasImage", "hasCardItem", "hasText", "href", "navigate", "VImg", "cover", "src", "loading", "loader", "item", "actions", "genOverlays"]
}
