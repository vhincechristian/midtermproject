{
  "version": 3,
  "sources": ["../../vuetify/src/composables/form.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void,\n    isValid: Ref<boolean | null>,\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n  isValid: boolean | null\n}\n\ninterface FieldValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\ninterface FormValidationResult {\n  valid: boolean\n  errors: FieldValidationResult[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<FormValidationResult> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errors = ref<FieldValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errors.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errors.value = results\n    isValidating.value = false\n\n    return { valid, errors: errors.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n    model.value = null\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errors.value = []\n    model.value = null\n  }\n\n  watch(items, () => {\n    let valid = null\n\n    if (items.value.some(item => item.isValid === false)) {\n      valid = false\n    } else if (items.value.every(item => item.isValid === true)) {\n      valid = true\n    }\n\n    model.value = valid\n  }, {\n    deep: true,\n  })\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation, isValid) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: isValid as unknown as boolean | null, // TODO: Better way to type this unwrapping?\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AA2CO,IAAMA,UAAqCC,OAAOC,IAAI,cAAX;AAW3C,IAAMC,gBAAgBC,aAAa;EACxCC,UAAUC;EACVC,UAAUD;EACVE,gBAAgBF;EAChBG,UAAUH;EACVI,YAAY;IACVC,MAAML;IACNM,SAAS;EAFC;AAL4B,CAAD;AAWlC,SAASC,WAAYC,OAAkB;AAC5C,QAAMC,QAAQC,gBAAgBF,OAAO,YAAR;AAE7B,QAAMG,aAAaC,SAAS,MAAMJ,MAAMT,QAAb;AAC3B,QAAMc,aAAaD,SAAS,MAAMJ,MAAML,QAAb;AAC3B,QAAMW,eAAeC,IAAI,KAAD;AACxB,QAAMC,QAAQD,IAAiB,CAAA,CAAd;AACjB,QAAME,SAASF,IAA6B,CAAA,CAA1B;AAElB,iBAAeG,WAAY;AACzB,UAAMC,UAAU,CAAA;AAChB,QAAIC,QAAQ;AAEZH,WAAOI,QAAQ,CAAA;AACfP,iBAAaO,QAAQ;AAErB,eAAWC,QAAQN,MAAMK,OAAO;AAC9B,YAAME,oBAAoB,MAAMD,KAAKJ,SAAL;AAEhC,UAAIK,kBAAkBC,SAAS,GAAG;AAChCJ,gBAAQ;AAERD,gBAAQM,KAAK;UACXC,IAAIJ,KAAKI;UACTC,eAAeJ;QAFJ,CAAb;MAID;AAED,UAAI,CAACH,SAASZ,MAAMP;AAAU;IAC/B;AAEDgB,WAAOI,QAAQF;AACfL,iBAAaO,QAAQ;AAErB,WAAO;MAAED;MAAOH,QAAQA,OAAOI;IAAxB;EACR;AAED,WAASO,QAAS;AAChBZ,UAAMK,MAAMQ,QAAQP,UAAQA,KAAKM,MAAL,CAA5B;AACAnB,UAAMY,QAAQ;EACf;AAED,WAASS,kBAAmB;AAC1Bd,UAAMK,MAAMQ,QAAQP,UAAQA,KAAKQ,gBAAL,CAA5B;AACAb,WAAOI,QAAQ,CAAA;AACfZ,UAAMY,QAAQ;EACf;AAEDU,QAAMf,OAAO,MAAM;AACjB,QAAII,QAAQ;AAEZ,QAAIJ,MAAMK,MAAMW,KAAKV,UAAQA,KAAKW,YAAY,KAA1C,GAAkD;AACpDb,cAAQ;IACT,WAAUJ,MAAMK,MAAMa,MAAMZ,UAAQA,KAAKW,YAAY,IAA3C,GAAkD;AAC3Db,cAAQ;IACT;AAEDX,UAAMY,QAAQD;EACf,GAAE;IACDe,MAAM;EADL,CAVE;AAcLC,UAAQ1C,SAAS;IACf2C,UAAU,CAACX,IAAIR,WAAUU,QAAOE,kBAAiBG,YAAY;AAC3D,UAAIjB,MAAMK,MAAMW,KAAKV,UAAQA,KAAKI,OAAOA,EAArC,GAA0C;AAC5CY,oBAAa,yBAAwBZ,KAA1B;MACZ;AAEDV,YAAMK,MAAMI,KAAK;QACfC;QACAR,UAAAA;QACAU,OAAAA;QACAE,iBAAAA;QACAG;MALe,CAAjB;IAOD;IACDM,YAAYb,QAAM;AAChBV,YAAMK,QAAQL,MAAMK,MAAMmB,OAAOlB,UAAQ;AACvC,eAAOA,KAAKI,OAAOA;MACpB,CAFa;IAGf;IACDf;IACAE;IACAC;IACAE;EAtBe,CAAV;AAyBP,SAAO;IACLC;IACAN;IACAE;IACAC;IACAE;IACAE;IACAU;IACAE;EARK;AAUR;AAEM,SAASW,UAAW;AACzB,SAAOC,OAAOhD,SAAS,IAAV;AACd;",
  "names": ["FormKey", "Symbol", "for", "makeFormProps", "propsFactory", "disabled", "Boolean", "fastFail", "lazyValidation", "readonly", "modelValue", "type", "default", "createForm", "props", "model", "useProxiedModel", "isDisabled", "computed", "isReadonly", "isValidating", "ref", "items", "errors", "validate", "results", "valid", "value", "item", "itemErrorMessages", "length", "push", "id", "errorMessages", "reset", "forEach", "resetValidation", "watch", "some", "isValid", "every", "deep", "provide", "register", "consoleWarn", "unregister", "filter", "useForm", "inject"]
}
