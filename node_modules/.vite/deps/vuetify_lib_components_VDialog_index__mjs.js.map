{
  "version": 3,
  "sources": ["../../vuetify/src/components/VDialog/VDialog.tsx"],
  "sourcesContent": ["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER, useRender } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VDialog',\n\n  inheritAttrs: false,\n\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n\n    ...makeDimensionProps({ width: 'auto' }),\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { dimensionStyles } = useDimension(props)\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    useRender(() => (\n      <VOverlay\n        v-model={ isActive.value }\n        class={[\n          'v-dialog',\n          {\n            'v-dialog--fullscreen': props.fullscreen,\n            'v-dialog--scrollable': props.scrollable,\n          },\n        ]}\n        style={ dimensionStyles.value }\n        transition={ props.transition }\n        ref={ overlay }\n        aria-role=\"dialog\"\n        aria-modal=\"true\"\n        activatorProps={{\n          'aria-haspopup': 'dialog',\n          'aria-expanded': String(isActive.value),\n        }}\n        z-index={ 2400 }\n        { ...scopeId }\n        { ...attrs }\n        v-slots={{\n          default: slots.default,\n          activator: slots.activator,\n        }}\n      />\n    ))\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAoBO,IAAMA,UAAUC,iBAAgB,EAElC;EACHC,MAAM;EAENC,cAAc;EAEdC,OAAO;IACLC,YAAYC;IACZC,QAAQ;MACNC,MAAMC;MACNC,SAAS;IAFH;IAIRC,aAAa;MACXH,MAAMF;MACNI,SAAS;IAFE;IAIbE,YAAYN;IACZO,YAAYP;IAEZ,GAAGQ,mBAAmB;MAAEC,OAAO;IAAT,CAAD;IACrB,GAAGC,oBAAoB;MACrBC,YAAY;QAAEC,WAAWC;MAAb;IADS,CAAD;EAdjB;EAmBPC,OAAO;IACL,qBAAsBC,WAAmB;EADpC;EAIPC,MAAOlB,OAAF,MAA2B;AAAA,QAAlB;MAAEmB;MAAOC;IAAT,IAAkB;AAC9B,UAAMC,WAAWC,gBAAgBtB,OAAO,YAAR;AAChC,UAAM;MAAEuB;IAAF,IAAsBC,aAAaxB,KAAD;AACxC,UAAM;MAAEyB;IAAF,IAAcC,WAAU;AAE9B,UAAMC,UAAUC,IAAG;AACnB,aAASC,UAAWC,GAAe;AAAA,UAAA,gBAAA;AACjC,YAAMC,SAASD,EAAEE;AACjB,YAAMC,QAAQH,EAAEI;AAEhB,UACEH,WAAWE,UAAX,iBACAN,QAAQV,UADR,QACA,eAAekB,cADf,kBAGAR,QAAQV,UAHR,QAGA,gBAAemB,aAEf,CAAC,CAACC,UAAUV,QAAQV,MAAMkB,SAAzB,EAAoCG,SAASL,KAA7C,KAED,CAACN,QAAQV,MAAMkB,UAAUI,SAASN,KAAjC,GACD;AACA,cAAMO,YAAY,CAAC,GAAGb,QAAQV,MAAMkB,UAAUM,iBAC5C,0EADoB,CAAJ,EAEfC,OAAOC,QAAM,CAACA,GAAGC,aAAa,UAAhB,CAFC;AAIlB,YAAI,CAACJ,UAAUK;AAAQ;AAEvB,cAAMC,eAAeN,UAAU;AAC/B,cAAMO,cAAcP,UAAUA,UAAUK,SAAS;AAEjD,YAAId,WAAWe,cAAc;AAC3BC,sBAAYC,MAAZ;QACD,OAAM;AACLF,uBAAaE,MAAb;QACD;MACF;IACF;AAED,QAAIC,YAAY;AACdC,YAAM,MAAM7B,SAASJ,SAASjB,MAAMO,aAAa4C,SAAO;AACtDA,cACId,SAASe,iBAAiB,WAAWvB,SAArC,IACAQ,SAASgB,oBAAoB,WAAWxB,SAAxC;MACL,GAAE;QAAEyB,WAAW;MAAb,CAJE;IAKN;AAEDJ,UAAM7B,UAAU,OAAM8B,QAAO;AAC3B,YAAMI,SAAQ;AACd,UAAIJ,KAAK;AAAA,YAAA;AACP,SAAA,aAAAxB,QAAQV,MAAOkB,cAAf,OAAA,SAAA,WAA0Ba,MAAM;UAAEQ,eAAe;QAAjB,CAAhC;MACD,OAAM;AAAA,YAAA;AACL,SAAA,eAAA7B,QAAQV,MAAOwC,gBAAf,OAAA,SAAA,aAA4BT,MAAM;UAAEQ,eAAe;QAAjB,CAAlC;MACD;IACF,CAPI;AASLE,cAAU,MAAA,YAAA,UAAA,WAAA;MAAA,cAEIrC,SAASJ;MAFb,uBAAA,YAEII,SAASJ,QAFb;MAAA,SAGC,CACL,YACA;QACE,wBAAwBjB,MAAMC;QAC9B,wBAAwBD,MAAMQ;MAFhC,CAFK;MAHD,SAUEe,gBAAgBN;MAVlB,cAWOjB,MAAMa;MAXb,OAYAc;MAZA,aAaI;MAbJ,cAcK;MAdL,kBAeU;QACd,iBAAiB;QACjB,iBAAiBtB,OAAOgB,SAASJ,KAAV;MAFT;MAfV,WAmBI;IAnBJ,GAoBDQ,SACAN,KArBC,GAsBG;MACPb,SAASc,MAAMd;MACfqD,WAAWvC,MAAMuC;IAFV,CAtBH,CAAD;AA6BT,WAAOC,YAAY,CAAA,GAAIjC,OAAL;EACnB;AAhHE,CAFkC;",
  "names": ["VDialog", "genericComponent", "name", "inheritAttrs", "props", "fullscreen", "Boolean", "origin", "type", "String", "default", "retainFocus", "scrollable", "modelValue", "makeDimensionProps", "width", "makeTransitionProps", "transition", "component", "VDialogTransition", "emits", "value", "setup", "attrs", "slots", "isActive", "useProxiedModel", "dimensionStyles", "useDimension", "scopeId", "useScopeId", "overlay", "ref", "onFocusin", "e", "before", "relatedTarget", "after", "target", "contentEl", "globalTop", "document", "includes", "contains", "focusable", "querySelectorAll", "filter", "el", "hasAttribute", "length", "firstElement", "lastElement", "focus", "IN_BROWSER", "watch", "val", "addEventListener", "removeEventListener", "immediate", "nextTick", "preventScroll", "activatorEl", "useRender", "activator", "forwardRefs"]
}
