{
  "version": 3,
  "sources": ["../../vuetify/src/util/color/APCA.ts", "../../vuetify/src/composables/theme.ts"],
  "sourcesContent": ["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low \u2206Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale\u2122\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n", "// Utilities\nimport {\n  computed,\n  inject,\n  provide,\n  reactive,\n  ref,\n  watch,\n  watchEffect,\n} from 'vue'\nimport {\n  colorToInt,\n  colorToRGB,\n  createRange,\n  darken,\n  getCurrentInstance,\n  getLuma,\n  IN_BROWSER,\n  intToHex,\n  lighten,\n  mergeDeep,\n  propsFactory,\n} from '@/util'\nimport { APCAcontrast } from '@/util/color/APCA'\n\n// Types\nimport type { App, DeepReadonly, InjectionKey, Ref } from 'vue'\nimport type { HeadAttrs, HeadClient } from '@vueuse/head'\n\ntype DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T\n\nexport type ThemeOptions = false | {\n  cspNonce?: string\n  defaultTheme?: string\n  variations?: false | VariationsOptions\n  themes?: Record<string, ThemeDefinition>\n}\nexport type ThemeDefinition = DeepPartial<InternalThemeDefinition>\n\ninterface InternalThemeOptions {\n  cspNonce?: string\n  isDisabled: boolean\n  defaultTheme: string\n  variations: false | VariationsOptions\n  themes: Record<string, InternalThemeDefinition>\n}\n\ninterface VariationsOptions {\n  colors: string[]\n  lighten: number\n  darken: number\n}\n\ninterface InternalThemeDefinition {\n  dark: boolean\n  colors: Colors\n  variables: Record<string, string | number>\n}\n\nexport interface Colors extends BaseColors, OnColors {\n  [key: string]: string\n}\n\ninterface BaseColors {\n  background: string\n  surface: string\n  primary: string\n  secondary: string\n  success: string\n  warning: string\n  error: string\n  info: string\n}\n\ninterface OnColors {\n  'on-background': string\n  'on-surface': string\n  'on-primary': string\n  'on-secondary': string\n  'on-success': string\n  'on-warning': string\n  'on-error': string\n  'on-info': string\n}\n\nexport interface ThemeInstance {\n  readonly isDisabled: boolean\n  readonly themes: Ref<Record<string, InternalThemeDefinition>>\n\n  readonly name: Readonly<Ref<string>>\n  readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  readonly computedThemes: DeepReadonly<Ref<Record<string, InternalThemeDefinition>>>\n\n  readonly themeClasses: Readonly<Ref<string | undefined>>\n  readonly styles: Readonly<Ref<string>>\n\n  readonly global: {\n    readonly name: Ref<string>\n    readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  }\n}\n\nexport const ThemeSymbol: InjectionKey<ThemeInstance> = Symbol.for('vuetify:theme')\n\nexport const makeThemeProps = propsFactory({\n  theme: String,\n}, 'theme')\n\nconst defaultThemeOptions: Exclude<ThemeOptions, false> = {\n  defaultTheme: 'light',\n  variations: { colors: [], lighten: 0, darken: 0 },\n  themes: {\n    light: {\n      dark: false,\n      colors: {\n        background: '#FFFFFF',\n        surface: '#FFFFFF',\n        'surface-variant': '#424242',\n        'on-surface-variant': '#EEEEEE',\n        primary: '#6200EE',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC6',\n        'secondary-darken-1': '#018786',\n        error: '#B00020',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#000000',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 0.87,\n        'medium-emphasis-opacity': 0.60,\n        'disabled-opacity': 0.38,\n        'idle-opacity': 0.04,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.12,\n        'dragged-opacity': 0.08,\n        'kbd-background-color': '#212529',\n        'kbd-color': '#FFFFFF',\n        'code-background-color': '#C2C2C2',\n      },\n    },\n    dark: {\n      dark: true,\n      colors: {\n        background: '#121212',\n        surface: '#212121',\n        'surface-variant': '#BDBDBD',\n        'on-surface-variant': '#424242',\n        primary: '#BB86FC',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC5',\n        'secondary-darken-1': '#03DAC5',\n        error: '#CF6679',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#FFFFFF',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 0.87,\n        'medium-emphasis-opacity': 0.60,\n        'disabled-opacity': 0.38,\n        'idle-opacity': 0.10,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.16,\n        'dragged-opacity': 0.08,\n        'kbd-background-color': '#212529',\n        'kbd-color': '#FFFFFF',\n        'code-background-color': '#B7B7B7',\n      },\n    },\n  },\n}\n\nfunction parseThemeOptions (options: ThemeOptions = defaultThemeOptions): InternalThemeOptions {\n  if (!options) return { ...defaultThemeOptions, isDisabled: true } as InternalThemeOptions\n\n  const themes: Record<string, InternalThemeDefinition> = {}\n  for (const [key, theme] of Object.entries(options.themes ?? {})) {\n    const defaultTheme = theme.dark\n      ? defaultThemeOptions.themes?.dark\n      : defaultThemeOptions.themes?.light\n    themes[key] = mergeDeep(defaultTheme, theme) as InternalThemeDefinition\n  }\n\n  return mergeDeep(\n    defaultThemeOptions,\n    { ...options, themes },\n  ) as InternalThemeOptions\n}\n\n// Composables\nexport function createTheme (app: App, options?: ThemeOptions): ThemeInstance {\n  const head = app._context.provides.usehead as HeadClient | undefined\n  const parsedOptions = reactive(parseThemeOptions(options))\n  const name = ref(parsedOptions.defaultTheme)\n  const themes = ref(parsedOptions.themes)\n\n  const computedThemes = computed(() => {\n    const acc: Record<string, InternalThemeDefinition> = {}\n    for (const [name, original] of Object.entries(themes.value)) {\n      const theme: InternalThemeDefinition = acc[name] = {\n        ...original,\n        colors: {\n          ...original.colors,\n        },\n      }\n\n      if (parsedOptions.variations) {\n        for (const name of parsedOptions.variations.colors) {\n          const color = theme.colors[name]\n          for (const variation of (['lighten', 'darken'] as const)) {\n            const fn = variation === 'lighten' ? lighten : darken\n            for (const amount of createRange(parsedOptions.variations[variation], 1)) {\n              theme.colors[`${name}-${variation}-${amount}`] = intToHex(fn(colorToInt(color), amount))\n            }\n          }\n        }\n      }\n\n      for (const color of Object.keys(theme.colors)) {\n        if (/on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue\n\n        const onColor = `on-${color}` as keyof OnColors\n        const colorVal = colorToInt(theme.colors[color]!)\n\n        const blackContrast = Math.abs(APCAcontrast(0, colorVal))\n        const whiteContrast = Math.abs(APCAcontrast(0xffffff, colorVal))\n\n        // TODO: warn about poor color selections\n        // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n        // const minContrast = Math.max(blackContrast, whiteContrast)\n        // if (minContrast < 60) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n        // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n        // }\n\n        // Prefer white text if both have an acceptable contrast ratio\n        theme.colors[onColor] = whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000'\n      }\n    }\n\n    return acc\n  })\n  const current = computed(() => computedThemes.value[name.value])\n\n  const styles = computed(() => {\n    const lines: string[] = []\n\n    if (current.value.dark) {\n      createCssClass(lines, ':root', ['color-scheme: dark'])\n    }\n\n    for (const [themeName, theme] of Object.entries(computedThemes.value)) {\n      const { variables, dark } = theme\n\n      createCssClass(lines, `.v-theme--${themeName}`, [\n        `color-scheme: ${dark ? 'dark' : 'normal'}`,\n        ...genCssVariables(theme),\n        ...Object.keys(variables).map(key => {\n          const value = variables[key]\n          const color = typeof value === 'string' && value.startsWith('#') ? colorToRGB(value) : undefined\n          const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined\n\n          return `--v-${key}: ${rgb ?? value}`\n        }),\n      ])\n    }\n\n    const bgLines: string[] = []\n    const fgLines: string[] = []\n\n    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)))\n    for (const key of colors) {\n      if (/on-[a-z]/.test(key)) {\n        createCssClass(fgLines, `.${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n      } else {\n        createCssClass(bgLines, `.bg-${key}`, [\n          `--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`,\n          `background: rgb(var(--v-theme-${key})) !important`,\n          `color: rgb(var(--v-theme-on-${key})) !important`,\n        ])\n        createCssClass(fgLines, `.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n        createCssClass(fgLines, `.border-${key}`, [`--v-border-color: var(--v-theme-${key})`])\n      }\n    }\n\n    lines.push(...bgLines, ...fgLines)\n\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('')\n  })\n\n  if (head) {\n    head.addHeadObjs(computed(() => {\n      const style: HeadAttrs = {\n        children: styles.value,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n      }\n      if (parsedOptions.cspNonce) style.nonce = parsedOptions.cspNonce\n\n      return { style: [style] }\n    }))\n\n    if (IN_BROWSER) {\n      watchEffect(() => head.updateDOM())\n    }\n  } else {\n    let styleEl = IN_BROWSER\n      ? document.getElementById('vuetify-theme-stylesheet')\n      : null\n\n    watch(styles, updateStyles, { immediate: true })\n    function updateStyles () {\n      if (parsedOptions.isDisabled) return\n\n      if (typeof document !== 'undefined' && !styleEl) {\n        const el = document.createElement('style')\n        el.type = 'text/css'\n        el.id = 'vuetify-theme-stylesheet'\n        if (parsedOptions.cspNonce) el.setAttribute('nonce', parsedOptions.cspNonce)\n\n        styleEl = el\n        document.head.appendChild(styleEl)\n      }\n\n      if (styleEl) styleEl.innerHTML = styles.value\n    }\n  }\n\n  const themeClasses = computed(() => parsedOptions.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  return {\n    isDisabled: parsedOptions.isDisabled,\n    name,\n    themes,\n    current,\n    computedThemes,\n    themeClasses,\n    styles,\n    global: {\n      name,\n      current,\n    },\n  }\n}\n\nexport function provideTheme (props: { theme?: string }) {\n  getCurrentInstance('provideTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  const name = computed<string>(() => {\n    return props.theme ?? theme?.name.value\n  })\n\n  const themeClasses = computed(() => theme.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  const newTheme: ThemeInstance = {\n    ...theme,\n    name,\n    themeClasses,\n  }\n\n  provide(ThemeSymbol, newTheme)\n\n  return newTheme\n}\n\nexport function useTheme () {\n  getCurrentInstance('useTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  return theme\n}\n\nfunction createCssClass (lines: string[], selector: string, content: string[]) {\n  lines.push(\n    `${selector} {\\n`,\n    ...content.map(line => `  ${line};\\n`),\n    '}\\n',\n  )\n}\n\nfunction genCssVariables (theme: InternalThemeDefinition) {\n  const lightOverlay = theme.dark ? 2 : 1\n  const darkOverlay = theme.dark ? 1 : 2\n\n  const variables: string[] = []\n  for (const [key, value] of Object.entries(theme.colors)) {\n    const rgb = colorToRGB(value)\n    variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`)\n    if (!key.startsWith('on-')) {\n      variables.push(`--v-theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`)\n    }\n  }\n\n  return variables\n}\n"],
  "mappings": "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",
  "names": ["mainTRC", "Rco", "Gco", "Bco", "normBG", "normTXT", "revTXT", "revBG", "blkThrs", "blkClmp", "deltaYmin", "scaleBoW", "scaleWoB", "loConThresh", "loConFactor", "loConOffset", "loClip", "APCAcontrast", "text", "background", "Rtxt", "Gtxt", "Btxt", "Rbg", "Gbg", "Bbg", "Ytxt", "Ybg", "Math", "abs", "outputContrast", "SAPC", "ThemeSymbol", "Symbol", "for", "makeThemeProps", "propsFactory", "theme", "String", "defaultThemeOptions", "defaultTheme", "variations", "colors", "lighten", "darken", "themes", "light", "dark", "background", "surface", "primary", "secondary", "error", "info", "success", "warning", "variables", "parseThemeOptions", "options", "isDisabled", "key", "Object", "entries", "mergeDeep", "createTheme", "app", "head", "_context", "provides", "usehead", "parsedOptions", "reactive", "name", "ref", "computedThemes", "computed", "acc", "original", "value", "color", "variation", "fn", "amount", "createRange", "intToHex", "colorToInt", "keys", "test", "onColor", "colorVal", "blackContrast", "Math", "abs", "APCAcontrast", "whiteContrast", "min", "current", "styles", "lines", "createCssClass", "themeName", "genCssVariables", "map", "startsWith", "colorToRGB", "undefined", "rgb", "r", "g", "b", "bgLines", "fgLines", "Set", "values", "flatMap", "push", "str", "i", "join", "addHeadObjs", "style", "children", "type", "id", "cspNonce", "nonce", "IN_BROWSER", "watchEffect", "updateDOM", "updateStyles", "document", "styleEl", "el", "createElement", "setAttribute", "appendChild", "innerHTML", "getElementById", "watch", "immediate", "themeClasses", "global", "provideTheme", "props", "getCurrentInstance", "inject", "Error", "newTheme", "provide", "useTheme", "selector", "content", "line", "lightOverlay", "darkOverlay", "getLuma"]
}
