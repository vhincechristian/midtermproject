{
  "version": 3,
  "sources": ["../../vuetify/src/components/VProgressLinear/VProgressLinear.tsx", "../../vuetify/src/composables/intersectionObserver.ts", "../../vuetify/src/composables/loader.tsx"],
  "sourcesContent": ["// Styles\nimport './VProgressLinear.sass'\n\n// Composables\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/rtl'\n\n// Utilities\nimport { computed, Transition } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\nexport const VProgressLinear = defineComponent({\n  name: 'VProgressLinear',\n\n  props: {\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    bgColor: String,\n    bgOpacity: [Number, String],\n    bufferValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    clickable: Boolean,\n    color: String,\n    height: {\n      type: [Number, String],\n      default: 4,\n    },\n    indeterminate: Boolean,\n    max: {\n      type: [Number, String],\n      default: 100,\n    },\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    reverse: Boolean,\n    stream: Boolean,\n    striped: Boolean,\n    roundedBar: Boolean,\n\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const progress = useProxiedModel(props, 'modelValue')\n    const { isRtl } = useRtl()\n    const { themeClasses } = provideTheme(props)\n    const { textColorClasses, textColorStyles } = useTextColor(props, 'color')\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => props.bgColor || props.color))\n    const { backgroundColorClasses: barColorClasses, backgroundColorStyles: barColorStyles } = useBackgroundColor(props, 'color')\n    const { roundedClasses } = useRounded(props)\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    const max = computed(() => parseInt(props.max, 10))\n    const height = computed(() => parseInt(props.height, 10))\n    const normalizedBuffer = computed(() => parseFloat(props.bufferValue) / max.value * 100)\n    const normalizedValue = computed(() => parseFloat(progress.value) / max.value * 100)\n    const isReversed = computed(() => isRtl.value !== props.reverse)\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition')\n    const opacity = computed(() => {\n      return props.bgOpacity == null\n        ? props.bgOpacity\n        : parseFloat(props.bgOpacity)\n    })\n\n    function handleClick (e: MouseEvent) {\n      if (!intersectionRef.value) return\n\n      const { left, right, width } = intersectionRef.value.getBoundingClientRect()\n      const value = isReversed.value ? (width - e.clientX) + (right - width) : e.clientX - left\n\n      progress.value = Math.round(value / width * max.value)\n    }\n\n    useRender(() => (\n      <props.tag\n        ref={ intersectionRef }\n        class={[\n          'v-progress-linear',\n          {\n            'v-progress-linear--active': props.active && isIntersecting.value,\n            'v-progress-linear--reverse': isReversed.value,\n            'v-progress-linear--rounded': props.rounded,\n            'v-progress-linear--rounded-bar': props.roundedBar,\n            'v-progress-linear--striped': props.striped,\n          },\n          roundedClasses.value,\n          themeClasses.value,\n        ]}\n        style={{\n          height: props.active ? convertToUnit(height.value) : 0,\n          '--v-progress-linear-height': convertToUnit(height.value),\n        }}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax={ props.max }\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n        onClick={ props.clickable && handleClick }\n      >\n        { props.stream && (\n          <div\n            key=\"stream\"\n            class={[\n              'v-progress-linear__stream',\n              textColorClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n              [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n              borderTop: `${convertToUnit(height.value / 2)} dotted`,\n              opacity: opacity.value,\n              top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n              width: convertToUnit(100 - normalizedBuffer.value, '%'),\n              '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1)),\n            }}\n          />\n        ) }\n\n        <div\n          class={[\n            'v-progress-linear__background',\n            backgroundColorClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            {\n              opacity: opacity.value,\n              width: convertToUnit((!props.stream ? 100 : normalizedBuffer.value), '%'),\n            },\n          ]}\n        />\n\n        <Transition name={ transition.value }>\n          { !props.indeterminate ? (\n            <div\n              class={[\n                'v-progress-linear__determinate',\n                barColorClasses.value,\n              ]}\n              style={[\n                barColorStyles.value,\n                { width: convertToUnit(normalizedValue.value, '%') },\n              ]}\n            />\n          ) : (\n            <div class=\"v-progress-linear__indeterminate\">\n              { ['long', 'short'].map(bar => (\n                <div\n                  key={ bar }\n                  class={[\n                    'v-progress-linear__indeterminate',\n                    bar,\n                    barColorClasses.value,\n                  ]}\n                  style={ barColorStyles.value }\n                />\n              )) }\n            </div>\n          ) }\n        </Transition>\n\n        { slots.default && (\n          <div class=\"v-progress-linear__content\">\n            { slots.default({ value: normalizedValue.value, buffer: normalizedBuffer.value }) }\n          </div>\n        ) }\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n", "// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = ref(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n", "// Components\nimport { VProgressLinear } from '@/components/VProgressLinear'\n\n// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, SetupContext } from 'vue'\nimport type { MakeSlots, SlotsToProps } from '@/util'\n\nexport interface LoaderSlotProps {\n  color: string | undefined\n  isActive: boolean\n}\n\nexport interface LoaderProps {\n  loading: boolean | string\n}\n\n// Composables\nexport const makeLoaderProps = propsFactory({\n  loading: Boolean,\n}, 'loader')\n\nexport function useLoader (\n  props: LoaderProps,\n  name = getCurrentInstanceName(),\n) {\n  const loaderClasses = computed(() => ({\n    [`${name}--loading`]: props.loading,\n  }))\n\n  return { loaderClasses }\n}\n\nexport function LoaderSlot (\n  props: {\n    active: boolean\n    name: string\n    color?: string\n  } & ExtractPropTypes<SlotsToProps<MakeSlots<{\n    default: [LoaderSlotProps]\n  }>>>,\n  { slots }: SetupContext,\n) {\n  return (\n    <div class={`${props.name}__loader`}>\n      { slots.default?.({\n        color: props.color,\n        isActive: props.active,\n      } as LoaderSlotProps) || (\n        <VProgressLinear\n          active={ props.active }\n          color={ props.color }\n          height=\"2\"\n          indeterminate\n        />\n      )}\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["useIntersectionObserver", "callback", "intersectionRef", "ref", "isIntersecting", "SUPPORTS_INTERSECTION", "observer", "IntersectionObserver", "entries", "value", "find", "entry", "onBeforeUnmount", "disconnect", "watch", "newValue", "oldValue", "unobserve", "observe", "flush", "VProgressLinear", "defineComponent", "name", "props", "active", "type", "Boolean", "default", "bgColor", "String", "bgOpacity", "Number", "bufferValue", "clickable", "color", "height", "indeterminate", "max", "modelValue", "reverse", "stream", "striped", "roundedBar", "makeRoundedProps", "makeTagProps", "makeThemeProps", "emits", "value", "setup", "slots", "progress", "useProxiedModel", "isRtl", "useRtl", "themeClasses", "provideTheme", "textColorClasses", "textColorStyles", "useTextColor", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "computed", "barColorClasses", "barColorStyles", "roundedClasses", "useRounded", "intersectionRef", "isIntersecting", "useIntersectionObserver", "parseInt", "normalizedBuffer", "parseFloat", "normalizedValue", "isReversed", "transition", "opacity", "handleClick", "e", "left", "right", "width", "getBoundingClientRect", "clientX", "Math", "round", "useRender", "rounded", "convertToUnit", "undefined", "borderTop", "top", "map", "bar", "buffer", "makeLoaderProps", "propsFactory", "loading", "Boolean", "useLoader", "props", "name", "getCurrentInstanceName", "loaderClasses", "computed", "LoaderSlot", "slots", "default", "color", "isActive", "active"]
}
