{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx", "../../vuetify/src/composables/size.ts"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent, flattenFragments, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef } from 'vue'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'v-icon')\n\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return flattenFragments(slot).filter(node =>\n          node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => (\n      <iconData.value.component\n        tag={ props.tag }\n        icon={ iconData.value.icon }\n        class={[\n          'v-icon',\n          'notranslate',\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          {\n            'v-icon--clickable': !!attrs.onClick,\n            'v-icon--start': props.start,\n            'v-icon--end': props.end,\n          },\n        ]}\n        style={[\n          !sizeClasses.value ? ({\n            fontSize: convertToUnit(props.size),\n            height: convertToUnit(props.size),\n            width: convertToUnit(props.size),\n          }) : undefined,\n          textColorStyles.value,\n        ]}\n        aria-hidden=\"true\"\n      />\n    ))\n\n    return {}\n  },\n})\n", "// Utilities\nimport { convertToUnit, destructComputed, getCurrentInstanceName, includes, propsFactory } from '@/util'\n\n// Types\nconst predefinedSizes = ['x-small', 'small', 'default', 'large', 'x-large']\n\nexport interface SizeProps {\n  size?: string | number\n}\n\n// Composables\nexport const makeSizeProps = propsFactory({\n  size: {\n    type: [String, Number],\n    default: 'default',\n  },\n}, 'size')\n\nexport function useSize (\n  props: SizeProps,\n  name = getCurrentInstanceName(),\n) {\n  return destructComputed(() => {\n    let sizeClasses\n    let sizeStyles\n    if (includes(predefinedSizes, props.size)) {\n      sizeClasses = `${name}--size-${props.size}`\n    } else if (props.size) {\n      sizeStyles = {\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size),\n      }\n    }\n    return { sizeClasses, sizeStyles }\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;;;ACGA,IAAMA,kBAAkB,CAAC,WAAW,SAAS,WAAW,SAAS,SAAzC;AAOjB,IAAMC,gBAAgBC,aAAa;EACxCC,MAAM;IACJC,MAAM,CAACC,QAAQC,MAAT;IACNC,SAAS;EAFL;AADkC,GAKvC,MALsC;AAOlC,SAASC,QACdC,OAEA;AAAA,MADAC,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADOC,uBAAsB;AAE7B,SAAOC,iBAAiB,MAAM;AAC5B,QAAIC;AACJ,QAAIC;AACJ,QAAIC,SAASf,iBAAiBS,MAAMN,IAAxB,GAA+B;AACzCU,oBAAe,GAAEH,cAAcD,MAAMN;IACtC,WAAUM,MAAMN,MAAM;AACrBW,mBAAa;QACXE,OAAOC,cAAcR,MAAMN,IAAP;QACpBe,QAAQD,cAAcR,MAAMN,IAAP;MAFV;IAId;AACD,WAAO;MAAEU;MAAaC;IAAf;EACR,CAZsB;AAaxB;;;ADlBM,IAAMK,iBAAiBC,aAAa;EACzCC,OAAOC;EACPC,OAAOC;EACPC,KAAKD;EACLE,MAAMC;EAEN,GAAGC,cAAa;EAChB,GAAGC,aAAa;IAAEC,KAAK;EAAP,CAAD;EACf,GAAGC,eAAc;AARwB,GASxC,QATuC;AAWnC,IAAMC,QAAQC,gBAAgB;EACnCC,MAAM;EAENC,OAAOhB,eAAc;EAErBiB,MAAOD,OAAF,MAA2B;AAAA,QAAlB;MAAEE;MAAOC;IAAT,IAAkB;AAC9B,QAAIC;AACJ,QAAID,MAAME,SAAS;AACjBD,iBAAWE,SAAS,MAAM;AAAA,YAAA,gBAAA;AACxB,cAAMC,QAAI,iBAAGJ,MAAME,YAAT,OAAA,SAAG,eAAA,KAAAF,KAAK;AAClB,YAAI,CAACI;AAAM;AAEX,gBAAA,wBAAOC,iBAAiBD,IAAD,EAAOE,OAAOC,UACnCA,KAAKC,YAAY,OAAOD,KAAKC,aAAa,QADrC,EAEL,OAFF,OAAA,SAAO,sBAEDA;MACP,CAPkB;IAQpB;AAED,UAAM;MAAEC;IAAF,IAAmBC,aAAab,KAAD;AACrC,UAAM;MAAEc;IAAF,IAAeC,QAAQX,YAAYJ,KAAb;AAC5B,UAAM;MAAEgB;IAAF,IAAkBC,QAAQjB,KAAD;AAC/B,UAAM;MAAEkB;MAAkBC;IAApB,IAAwCC,aAAaC,MAAMrB,OAAO,OAAR,CAAN;AAE1DsB,cAAU,MAAA,YAAA,SAAA,MAAA,WAAA;MAAA,OAEAtB,MAAML;MAFN,QAGCmB,SAASS,MAAMhC;MAHhB,SAIC,CACL,UACA,eACAqB,aAAaW,OACbP,YAAYO,OACZL,iBAAiBK,OACjB;QACE,qBAAqB,CAAC,CAACrB,MAAMsB;QAC7B,iBAAiBxB,MAAMZ;QACvB,eAAeY,MAAMV;MAHvB,CANK;MAJD,SAgBC,CACL,CAAC0B,YAAYO,QAAS;QACpBE,UAAUC,cAAc1B,MAAM2B,IAAP;QACvBC,QAAQF,cAAc1B,MAAM2B,IAAP;QACrBE,OAAOH,cAAc1B,MAAM2B,IAAP;MAHA,IAIjBG,QACLX,gBAAgBI,KANX;MAhBD,eAwBM;IAxBN,GAAA,IAAA,CAAD;AA4BT,WAAO,CAAA;EACR;AApDkC,CAAD;",
  "names": ["predefinedSizes", "makeSizeProps", "propsFactory", "size", "type", "String", "Number", "default", "useSize", "props", "name", "getCurrentInstanceName", "destructComputed", "sizeClasses", "sizeStyles", "includes", "width", "convertToUnit", "height", "makeVIconProps", "propsFactory", "color", "String", "start", "Boolean", "end", "icon", "IconValue", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "defineComponent", "name", "props", "setup", "attrs", "slots", "slotIcon", "default", "computed", "slot", "flattenFragments", "filter", "node", "children", "themeClasses", "provideTheme", "iconData", "useIcon", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "useRender", "value", "onClick", "fontSize", "convertToUnit", "size", "height", "width", "undefined"]
}
