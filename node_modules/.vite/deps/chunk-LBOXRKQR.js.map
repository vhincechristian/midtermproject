{
  "version": 3,
  "sources": ["../../vuetify/src/components/VDefaultsProvider/VDefaultsProvider.tsx", "../../vuetify/src/composables/variant.tsx"],
  "sourcesContent": ["// Composables\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent, toRefs } from 'vue'\n\n// Types\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { PropType } from 'vue'\n\nexport const VDefaultsProvider = defineComponent({\n  name: 'VDefaultsProvider',\n\n  props: {\n    defaults: Object as PropType<DefaultsOptions>,\n    reset: [Number, String],\n    root: Boolean,\n    scoped: Boolean,\n  },\n\n  setup (props, { slots }) {\n    const { defaults, reset, root, scoped } = toRefs(props)\n\n    provideDefaults(defaults, {\n      reset,\n      root,\n      scoped,\n    })\n\n    return () => slots.default?.()\n  },\n})\n", "// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'elevated',\n  'flat',\n  'tonal',\n  'outlined',\n  'text',\n  'plain',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <span key=\"overlay\" class={`${name}__overlay`} /> }\n\n      <span key=\"underlay\" class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'elevated',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAUO,IAAMA,oBAAoBC,gBAAgB;EAC/CC,MAAM;EAENC,OAAO;IACLC,UAAUC;IACVC,OAAO,CAACC,QAAQC,MAAT;IACPC,MAAMC;IACNC,QAAQD;EAJH;EAOPE,MAAOT,OAAF,MAAoB;AAAA,QAAX;MAAEU;IAAF,IAAW;AACvB,UAAM;MAAET;MAAUE;MAAOG;MAAME;IAAzB,IAAoCG,OAAOX,KAAD;AAEhDY,oBAAgBX,UAAU;MACxBE;MACAG;MACAE;IAHwB,CAAX;AAMf,WAAO,MAAA;AAAA,UAAA;AAAA,cAAA,iBAAME,MAAMG,YAAZ,OAAA,SAAM,eAAA,KAAAH,KAAK;IAAX;EACR;AApB8C,CAAD;;;ACCzC,IAAMI,kBAAkB,CAC7B,YACA,QACA,SACA,YACA,QACA,OAN6B;AAgBxB,SAASC,YAAaC,aAAsBC,MAAc;AAC/D,SAAA,YAAA,UAAA,MAAA,CAEMD,eAAW,YAAA,QAAA;IAAA,OAAc;IAAd,SAAgC,GAAEC;EAAlC,GAAA,IAAA,GAFjB,YAAA,QAAA;IAAA,OAIc;IAJd,SAIiC,GAAEA;EAJnC,GAAA,IAAA,CAAA,CAAA;AAOD;AAEM,IAAMC,mBAAmBC,aAAa;EAC3CC,OAAOC;EACPC,SAAS;IACPC,MAAMF;IACNG,SAAS;IACTC,WAAYC,OAAWZ,gBAAgBa,SAASD,CAAzB;EAHhB;AAFkC,GAO1C,SAPyC;AASrC,SAASE,WACdC,OAEA;AAAA,MADAZ,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADOa,uBAAsB;AAE7B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,UAAM;MAAEV;IAAF,IAAcW,MAAMJ,KAAD;AACzB,WAAQ,GAAEZ,iBAAiBK;EAC5B,CAH8B;AAK/B,QAAM;IAAEY;IAAcC;EAAhB,IAAgCC,SAASJ,SAAS,MAAM;AAC5D,UAAM;MAAEV;MAASF;IAAX,IAAqBa,MAAMJ,KAAD;AAChC,WAAO;MACL,CAAC,CAAC,YAAY,MAAb,EAAqBF,SAASL,OAA9B,IAAyC,eAAe,SAASF;IAD7D;EAGR,CALsD,CAAT;AAO9C,SAAO;IAAEc;IAAcC;IAAaJ;EAA7B;AACR;",
  "names": ["VDefaultsProvider", "defineComponent", "name", "props", "defaults", "Object", "reset", "Number", "String", "root", "Boolean", "scoped", "setup", "slots", "toRefs", "provideDefaults", "default", "allowedVariants", "genOverlays", "isClickable", "name", "makeVariantProps", "propsFactory", "color", "String", "variant", "type", "default", "validator", "v", "includes", "useVariant", "props", "getCurrentInstanceName", "variantClasses", "computed", "unref", "colorClasses", "colorStyles", "useColor"]
}
