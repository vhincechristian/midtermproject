import {
  VOverlay,
  useScopeId
} from "./chunk-DRVYUZJH.js";
import {
  forwardRefs
} from "./chunk-LJBPEXTV.js";
import "./chunk-AZYSRUSG.js";
import {
  VDialogTransition
} from "./chunk-TAVEIZAW.js";
import "./chunk-M2ZCYXKT.js";
import {
  useProxiedModel
} from "./chunk-6W4TPJNK.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-NK4JSDSF.js";
import {
  makeTransitionProps
} from "./chunk-HLJ43ODN.js";
import "./chunk-C5JIBSGY.js";
import "./chunk-J7UQNXDO.js";
import {
  IN_BROWSER,
  genericComponent,
  useRender
} from "./chunk-TW2WKBM2.js";
import {
  createVNode,
  mergeProps,
  nextTick,
  ref,
  watch
} from "./chunk-V4LB3WK7.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VDialog/VDialog.mjs
import "C:/Users/vhinc/Desktop/midtermproject/node_modules/vuetify/lib/components/VDialog/VDialog.css";
var VDialog = genericComponent()({
  name: "VDialog",
  inheritAttrs: false,
  props: {
    fullscreen: Boolean,
    origin: {
      type: String,
      default: "center center"
    },
    retainFocus: {
      type: Boolean,
      default: true
    },
    scrollable: Boolean,
    modelValue: Boolean,
    ...makeDimensionProps({
      width: "auto"
    }),
    ...makeTransitionProps({
      transition: {
        component: VDialogTransition
      }
    })
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      scopeId
    } = useScopeId();
    const overlay = ref();
    function onFocusin(e) {
      var _overlay$value, _overlay$value2;
      const before = e.relatedTarget;
      const after = e.target;
      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && (_overlay$value2 = overlay.value) != null && _overlay$value2.globalTop && ![document, overlay.value.contentEl].includes(after) && !overlay.value.contentEl.contains(after)) {
        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')].filter((el) => !el.hasAttribute("disabled"));
        if (!focusable.length)
          return;
        const firstElement = focusable[0];
        const lastElement = focusable[focusable.length - 1];
        if (before === firstElement) {
          lastElement.focus();
        } else {
          firstElement.focus();
        }
      }
    }
    if (IN_BROWSER) {
      watch(() => isActive.value && props.retainFocus, (val) => {
        val ? document.addEventListener("focusin", onFocusin) : document.removeEventListener("focusin", onFocusin);
      }, {
        immediate: true
      });
    }
    watch(isActive, async (val) => {
      await nextTick();
      if (val) {
        var _contentEl;
        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({
          preventScroll: true
        });
      } else {
        var _activatorEl;
        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({
          preventScroll: true
        });
      }
    });
    useRender(() => createVNode(VOverlay, mergeProps({
      "modelValue": isActive.value,
      "onUpdate:modelValue": ($event) => isActive.value = $event,
      "class": ["v-dialog", {
        "v-dialog--fullscreen": props.fullscreen,
        "v-dialog--scrollable": props.scrollable
      }],
      "style": dimensionStyles.value,
      "transition": props.transition,
      "ref": overlay,
      "aria-role": "dialog",
      "aria-modal": "true",
      "activatorProps": {
        "aria-haspopup": "dialog",
        "aria-expanded": String(isActive.value)
      },
      "z-index": 2400
    }, scopeId, attrs), {
      default: slots.default,
      activator: slots.activator
    }));
    return forwardRefs({}, overlay);
  }
});
export {
  VDialog
};
//# sourceMappingURL=vuetify_lib_components_VDialog_index__mjs.js.map
