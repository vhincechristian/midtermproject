{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAppBar/VAppBar.tsx", "../../vuetify/src/components/VAppBar/VAppBarNavIcon.tsx", "../../vuetify/src/components/VAppBar/VAppBarTitle.tsx"],
  "sourcesContent": ["// Styles\nimport './VAppBar.sass'\n\n// Components\nimport { filterToolbarProps, makeVToolbarProps, VToolbar } from '@/components/VToolbar/VToolbar'\n\n// Composables\nimport { makeLayoutItemProps, useLayoutItem } from '@/composables/layout'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, toRef } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VAppBar = defineComponent({\n  name: 'VAppBar',\n\n  props: {\n    // TODO: Implement scrolling techniques\n    // hideOnScroll: Boolean\n    // invertedScroll: Boolean\n    // collapseOnScroll: Boolean\n    // elevateOnScroll: Boolean\n    // shrinkOnScroll: Boolean\n    // fadeImageOnScroll: Boolean\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    location: {\n      type: String as PropType<'top' | 'bottom'>,\n      default: 'top',\n      validator: (value: any) => ['top', 'bottom'].includes(value),\n    },\n\n    ...makeVToolbarProps(),\n    ...makeLayoutItemProps(),\n\n    height: {\n      type: [Number, String],\n      default: 64,\n    },\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const vToolbarRef = ref()\n    const isActive = useProxiedModel(props, 'modelValue')\n    const height = computed(() => {\n      const height: number = vToolbarRef.value?.contentHeight ?? 0\n      const extensionHeight: number = vToolbarRef.value?.extensionHeight ?? 0\n\n      return (height + extensionHeight)\n    })\n    const { layoutItemStyles } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: toRef(props, 'location'),\n      layoutSize: height,\n      elementSize: height,\n      active: isActive,\n      absolute: toRef(props, 'absolute'),\n    })\n\n    useRender(() => {\n      const [toolbarProps] = filterToolbarProps(props)\n\n      return (\n        <VToolbar\n          ref={ vToolbarRef }\n          class={[\n            'v-app-bar',\n            {\n              'v-app-bar--bottom': props.location === 'bottom',\n            },\n          ]}\n          style={{\n            ...layoutItemStyles.value,\n            height: undefined,\n          }}\n          { ...toolbarProps }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VAppBar = InstanceType<typeof VAppBar>\n", "// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\n\nexport const VAppBarNavIcon = defineComponent({\n  name: 'VAppBarNavIcon',\n\n  props: {\n    icon: {\n      type: IconValue,\n      default: '$menu',\n    },\n  },\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <VBtn\n        class=\"v-app-bar-nav-icon\"\n        icon={ props.icon }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n", "// Composables\nimport { VToolbarTitle } from '@/components/VToolbar'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\n\nexport const VAppBarTitle = defineComponent({\n  name: 'VAppBarTitle',\n\n  props: { ...VToolbarTitle.props },\n\n  setup (_, { slots }) {\n    useRender(() => (\n      <VToolbarTitle\n        class=\"v-app-bar-title\"\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAgBO,IAAMA,UAAUC,gBAAgB;EACrCC,MAAM;EAENC,OAAO;IAQLC,YAAY;MACVC,MAAMC;MACNC,SAAS;IAFC;IAIZC,UAAU;MACRH,MAAMI;MACNF,SAAS;MACTG,WAAYC,WAAe,CAAC,OAAO,QAAR,EAAkBC,SAASD,KAA3B;IAHnB;IAMV,GAAGE,kBAAiB;IACpB,GAAGC,oBAAmB;IAEtBC,QAAQ;MACNV,MAAM,CAACW,QAAQP,MAAT;MACNF,SAAS;IAFH;EArBH;EA2BPU,OAAO;IACL,qBAAsBN,WAAmB;EADpC;EAIPO,MAAOf,OAAF,MAAoB;AAAA,QAAX;MAAEgB;IAAF,IAAW;AACvB,UAAMC,cAAcC,IAAG;AACvB,UAAMC,WAAWC,gBAAgBpB,OAAO,YAAR;AAChC,UAAMY,SAASS,SAAS,MAAM;AAAA,UAAA,uBAAA,oBAAA,uBAAA;AAC5B,YAAMT,WAAc,yBAAA,qBAAGK,YAAYT,UAAf,OAAA,SAAG,mBAAmBc,kBAAtB,OAAA,wBAAuC;AAC3D,YAAMC,mBAAuB,yBAAA,sBAAGN,YAAYT,UAAf,OAAA,SAAG,oBAAmBe,oBAAtB,OAAA,wBAAyC;AAEtE,aAAQX,UAASW;IAClB,CALsB;AAMvB,UAAM;MAAEC;IAAF,IAAuBC,cAAc;MACzCC,IAAI1B,MAAMD;MACV4B,OAAON,SAAS,MAAMO,SAAS5B,MAAM2B,OAAO,EAAd,CAAf;MACfE,UAAUC,MAAM9B,OAAO,UAAR;MACf+B,YAAYnB;MACZoB,aAAapB;MACbqB,QAAQd;MACRe,UAAUJ,MAAM9B,OAAO,UAAR;IAP0B,CAAD;AAU1CmC,cAAU,MAAM;AACd,YAAM,CAACC,YAAD,IAAiBC,mBAAmBrC,KAAD;AAEzC,aAAA,YAAA,UAAA,WAAA;QAAA,OAEUiB;QAFV,SAGW,CACL,aACA;UACE,qBAAqBjB,MAAMK,aAAa;QAD1C,CAFK;QAHX,SASW;UACL,GAAGmB,iBAAiBhB;UACpBI,QAAQ0B;QAFH;MATX,GAaSF,YAbT,GAccpB,KAdd;IAiBD,CApBQ;AAsBT,WAAO,CAAA;EACR;AA5EoC,CAAD;;;ACR/B,IAAMuB,iBAAiBC,gBAAgB;EAC5CC,MAAM;EAENC,OAAO;IACLC,MAAM;MACJC,MAAMC;MACNC,SAAS;IAFL;EADD;EAOPC,MAAOL,OAAF,MAAoB;AAAA,QAAX;MAAEM;IAAF,IAAW;AACvBC,cAAU,MAAA,YAAA,MAAA;MAAA,SAEA;MAFA,QAGCP,MAAMC;IAHP,GAIIK,KAJJ,CAAD;AAQT,WAAO,CAAA;EACR;AApB2C,CAAD;;;ACHtC,IAAME,eAAeC,gBAAgB;EAC1CC,MAAM;EAENC,OAAO;IAAE,GAAGC,cAAcD;EAAnB;EAEPE,MAAOC,GAAF,MAAgB;AAAA,QAAX;MAAEC;IAAF,IAAW;AACnBC,cAAU,MAAA,YAAA,eAAA;MAAA,SAEA;IAFA,GAGID,KAHJ,CAAD;AAOT,WAAO,CAAA;EACR;AAdyC,CAAD;",
  "names": ["VAppBar", "defineComponent", "name", "props", "modelValue", "type", "Boolean", "default", "location", "String", "validator", "value", "includes", "makeVToolbarProps", "makeLayoutItemProps", "height", "Number", "emits", "setup", "slots", "vToolbarRef", "ref", "isActive", "useProxiedModel", "computed", "contentHeight", "extensionHeight", "layoutItemStyles", "useLayoutItem", "id", "order", "parseInt", "position", "toRef", "layoutSize", "elementSize", "active", "absolute", "useRender", "toolbarProps", "filterToolbarProps", "undefined", "VAppBarNavIcon", "defineComponent", "name", "props", "icon", "type", "IconValue", "default", "setup", "slots", "useRender", "VAppBarTitle", "defineComponent", "name", "props", "VToolbarTitle", "setup", "_", "slots", "useRender"]
}
